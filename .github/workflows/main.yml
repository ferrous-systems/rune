name: Continuous integration

on:
  push:
    branches:
    - master
  pull_request:

jobs:
  check:
    name: Compile and Test
    strategy:
      matrix:
        os:
          - ubuntu-18.04
          - macos-latest
          # Note: we need to use pre-compiled TensorFlow Lite binaries on
          # Windows, so ignore the Windows build for now
          #- windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            python/target
          key: ${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Update Rustup
        run: |
          # We need to update rustup because the mac version is out of date and
          # self-update is disabled. https://github.com/rust-lang/rustup/issues/2766
          curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain none -y
        if: runner.os == 'macOS'
      - name: Setup Rust
        run: rustup show
      - name: Type Check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --workspace --verbose --locked
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --workspace --verbose --locked
      - name: Unit Tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --verbose --locked
      - name: Integration Tests
        uses: actions-rs/cargo@v1
        with:
          command: integration-tests
      - name: Cargo.toml Sanity Checks
        uses: actions-rs/cargo@v1
        with:
          command: xtask
          args: check-manifests

  api-docs:
    name: Generate API Docs
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Update Rustup
        run: |
          # We need to update rustup because the mac version is out of date and
          # self-update is disabled. https://github.com/rust-lang/rustup/issues/2766
          curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain none -y
        if: runner.os == 'macOS'
      - name: Setup Rust
        run: rustup show
      - name: Generate API Docs
        id: first_try
        uses: actions-rs/cargo@v1
        continue-on-error: true
        with:
          command: doc
          args: --workspace --verbose --locked
      # Sometimes generating docs on GitHub actions will spuriously fail with
      # a random "file not found" error - possibly due to caching.
      #
      #   error: failed to remove file `/home/runner/work/rune/rune/target/doc/rune/constant.DEFAULT_RUST_LOG.html`
      #   Caused by:
      #      No such file or directory (os error 2)
      - name: Generate API Docs (second attempt)
        run: |
          cargo clean --doc
          cargo doc --workspace --verbose --locked
        if: ${{ steps.first_try.outcome == 'failure' }}
      - name: Automatically redirect to rune_runtime docs
        run: echo '<meta http-equiv="refresh" content="0; url=rune_runtime/index.html" />' > target/doc/index.html
      - name: Upload API Docs
        uses: JamesIves/github-pages-deploy-action@4.1.1
        if: github.ref == 'refs/heads/master'
        with:
          branch: gh-pages
          folder: target/doc

  rune_native:
    name: Build librune_native for ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-18.04
            target: x86_64-unknown-linux-gnu
            features: wasmer-runtime,tflite
          # Android
          - os: ubuntu-18.04
            target: aarch64-linux-android
            features: wasmer-runtime
          # MacOS
          # FIXME: The tflite crate doesn't compile under cross so we are doing
          # a native build in a separate rune_native_mac job
          # - os: macos-latest
          #   target: x86_64-apple-darwin
          #   features: wasmer-runtime
          # iOS
          # FIXME: Enable when wasmer is supported on iOS
          # https://github.com/wasmerio/wasmer/issues/1832)
          # - os: macos-latest
          #   target: x86_64-apple-ios
          #   features: ""
          # - os: macos-latest
          #   target: aarch64-apple-ios
          #   features: ""
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
      - name: Update Rustup
        run: |
          # We need to update rustup because the mac version is out of date and
          # self-update is disabled. https://github.com/rust-lang/rustup/issues/2766
          curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain none -y
        if: runner.os == 'macOS'
      - name: Setup Rust
        run: rustup show
      - name: Install Cross
        uses: actions-rs/install@v0.1
        with:
          crate: cross
      - name: Compile
        run: |
          cross build --package=rune-native \
                      --target=${{ matrix.target }} \
                      --features=${{ matrix.features }} \
                      --verbose --locked --release
      - name: Generate the header file
        run: |
          cross test --package=rune-native \
                     --target=${{ matrix.target }} \
                     --features=${{ matrix.features }} \
                     --features=c-headers \
                     --verbose --locked --release \
                     -- \
                     generate_headers
      - name: Format the header file
        run: clang-format -i target/rune.h
      - name: Generate archive
        run: |
          TARGET_DIR=target/${{ matrix.target }}/release
          rm $TARGET_DIR/*.d
          zip -j -9 rune_native.${{ matrix.target }}.zip \
            target/rune.h \
            $TARGET_DIR/*rune_native* \
            bindings/native/README.md \
            LICENSE_*.md \
            CHANGELOG.md
      - name: Upload archive
        uses: actions/upload-artifact@v2
        with:
          name: rune_native.${{ matrix.target }}
          path: rune_native.${{ matrix.target }}.zip

  # Ideally we'd just add this to the rune_native job and update our build
  # matrix, but tflite won't compile using "cross".
  rune_native_mac:
    name: Build librune_native for MacOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
      - name: Update Rustup
        run: |
          # We need to update rustup because the mac version is out of date and
          # self-update is disabled. https://github.com/rust-lang/rustup/issues/2766
          curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain none -y
      - name: Setup Rust
        run: rustup show
      - name: Set target
        run: echo "target=$(rustc --version --verbose | grep host | cut -d' ' -f 2)" >> $GITHUB_ENV
      - name: Compile
        run: |
          cargo build --package=rune-native \
                      --features=wasmer-runtime,tflite \
                      --verbose --locked --release
      - name: Generate the header file
        run: |
          cargo test --package=rune-native \
                     --features=wasmer-runtime,tflite \
                     --features=c-headers \
                     --verbose --locked --release \
                     -- \
                     generate_headers
      - name: Format the header file
        run: clang-format -i target/rune.h
      - name: Generate archive
        run: |
          TARGET_DIR=target/release
          rm $TARGET_DIR/*.d
          zip -j -9 rune_native.$TARGET.zip \
            target/rune.h \
            $TARGET_DIR/*rune_native* \
            bindings/native/README.md \
            LICENSE_*.md \
            CHANGELOG.md
      - name: Upload archive
        uses: actions/upload-artifact@v2
        with:
          name: rune_native.${{ env.target }}
          path: rune_native.${{ env.target }}.zip
